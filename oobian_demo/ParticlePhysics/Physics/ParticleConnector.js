/*@Generated by SharpKit v4.23.8000*/
if(typeof(Physics) == "undefined")
    Physics = {};
Physics.ParticleConnector = function(particle1,particle2,restingLength,springConstant)
{
    this.set_Particle1(particle1);
    this.set_Particle2(particle2);
    this.set_RestingLength(restingLength);
    this.springConstant = springConstant;
}
Physics.ParticleConnector.prototype.particle1 = null;
Physics.ParticleConnector.prototype.particle2 = null;
Physics.ParticleConnector.prototype.springConstant = 0;
Physics.ParticleConnector.prototype.restingLength = 0;
Physics.ParticleConnector.prototype._metaData = null;
Physics.ParticleConnector.prototype.get_MetaData = function()
{
    return this._metaData;
}
Physics.ParticleConnector.prototype.set_MetaData = function(value)
{
    this._metaData = value;
}
Physics.ParticleConnector.prototype.get_Particle1 = function()
{
    return this.particle1;
}
Physics.ParticleConnector.prototype.set_Particle1 = function(value)
{
    this.particle1 = value;
}
Physics.ParticleConnector.prototype.get_Particle2 = function()
{
    return this.particle2;
}
Physics.ParticleConnector.prototype.set_Particle2 = function(value)
{
    this.particle2 = value;
}
Physics.ParticleConnector.prototype.get_SpringConstant = function()
{
    return this.springConstant;
}
Physics.ParticleConnector.prototype.set_SpringConstant = function(value)
{
    this.springConstant = value;
}
Physics.ParticleConnector.prototype.get_RestingLength = function()
{
    return this.restingLength;
}
Physics.ParticleConnector.prototype.set_RestingLength = function(value)
{
    this.restingLength = value;
}
Physics.ParticleConnector.prototype.ForceOnParticle1 = function()
{
    var v=this.particle1.get_Position() - this.particle2.get_Position();
    var currentLength=Physics.Vector.Length(v);
    if(v.get_X() != 0 || v.get_Y() != 0)
    {
        Physics.Vector.Normalize(v);
    }
    else
    {
        var r=new System.Random.ctor$$Int32(System.DateTime.get_Now().get_Millisecond());
        var value=r.NextDouble();
        v = new Physics.Vector(value,1 - value);
    }
    Physics.Vector.MultiplyLength(v,(currentLength - this.restingLength) * this.springConstant * -1);
    return v;
}
Physics.ParticleConnector.prototype.ForceOnParticle2 = function()
{
    var v=this.ForceOnParticle1();
    Physics.Vector.MultiplyLength(v,-1);
    return v;
}
