/*@Generated by SharpKit v4.23.8000*/
if(typeof(JsTypes) == "undefined")
    JsTypes = [];
var Physics$Particle=
{
    fullname:"Physics.Particle",
    baseTypeName:"System.Object",
    assemblyName:"Physics",
    Kind:"Class",
    definition:
    {
        ctor:function(mass,restingForce,forceDissipationFunction)
        {
            this._invmass = 0;
            this._mass = 0;
            this._restingForce = 0;
            this._previousPosition = null;
            this._position = null;
            this._accumulatedForces = null;
            this._connectors = null;
            this._forceDissipationFunction = null;
            this._metaData = null;
            System.Object.ctor.call(this);
            this._mass = mass;
            this._invmass = 1 / mass;
            this._restingForce = restingForce;
            this._forceDissipationFunction = forceDissipationFunction;
            this._connectors = new System.Collections.ArrayList.ctor();
            this._previousPosition = new Physics.Vector(0,0);
            this._position = new Physics.Vector(0,0);
            this._accumulatedForces = new Physics.Vector(0,0);
        },
        add_DisposeConnectorMetaData:function(value){this.DisposeConnectorMetaData=CombineDelegates(this.DisposeConnectorMetaData, value);},
        remove_DisposeConnectorMetaData:function(value){this.DisposeConnectorMetaData=RemoveDelegate(this.DisposeConnectorMetaData, value);},
        MetaData$$:"Physics.ParticleMetadata",
        get_MetaData:function()
        {
            return this._metaData;
        },
        set_MetaData:function(value)
        {
            this._metaData = value;
        },
        RestingForce$$:"System.Double",
        get_RestingForce:function()
        {
            return this._restingForce;
        },
        set_RestingForce:function(value)
        {
            this._restingForce = value;
        },
        Mass$$:"System.Double",
        get_Mass:function()
        {
            return this._mass;
        },
        set_Mass:function(value)
        {
            this._mass = value;
        },
        Position$$:"Physics.Vector",
        get_Position:function()
        {
            return this._position;
        },
        set_Position:function(value)
        {
            this._position = value;
        },
        PreviousPosition$$:"Physics.Vector",
        get_PreviousPosition:function()
        {
            return this._previousPosition;
        },
        set_PreviousPosition:function(value)
        {
            this._previousPosition = value;
        },
        InvMass$$:"System.Double",
        get_InvMass:function()
        {
            return this._invmass;
        },
        set_InvMass:function(value)
        {
            this._invmass = value;
        },
        AccumulatedForces$$:"Physics.Vector",
        get_AccumulatedForces:function()
        {
            return this._accumulatedForces;
        },
        set_AccumulatedForces:function(value)
        {
            this._accumulatedForces = value;
        },
        Connectors$$:"System.Collections.ArrayList",
        get_Connectors:function()
        {
            return this._connectors;
        },
        AddConnection:function(p,connectorMetaData,restingLength,springConstant)
        {
            var $it1=this.get_Connectors().GetEnumerator();
            while($it1.MoveNext())
            {
                var connector=$it1.get_Current();
                if(connector.get_Particle1() == p || connector.get_Particle2() == p)
                {
                    return;
                }
            }
            var pc=new Physics.ParticleConnector(this,p,restingLength,springConstant);
            pc.set_MetaData(connectorMetaData);
            this.AddConnector(pc);
            p.AddConnector(pc);
        },
        RemoveConnection:function(p)
        {
            var $it2=this.get_Connectors().GetEnumerator();
            while($it2.MoveNext())
            {
                var connector=$it2.get_Current();
                if(connector.get_Particle2() == p || connector.get_Particle1() == p)
                {
                    this.RemoveConnector(connector);
                    p.RemoveConnector(connector);
                    if(this.DisposeConnectorMetaData != null)
                    {
                        this.DisposeConnectorMetaData(this,new Physics.MetaDataDisposeEventArgs(connector.get_MetaData()));
                    }
                    break;
                }
            }
        },
        AddConnector:function(pc)
        {
            this.get_Connectors().Add(pc);
        },
        RemoveConnector:function(pc)
        {
            this.get_Connectors().Remove(pc);
        },
        DisconnectParticle:function()
        {
            for(var i=this._connectors.get_Count() - 1;i >= 0;--i)
            {
                if((Cast(this._connectors.get_Item$$Int32(i),Physics.ParticleConnector)).get_Particle1() != this)
                {
                    (Cast(this._connectors.get_Item$$Int32(i),Physics.ParticleConnector)).get_Particle1().RemoveConnector(Cast(this._connectors.get_Item$$Int32(i),Physics.ParticleConnector));
                }
                else
                {
                    (Cast(this._connectors.get_Item$$Int32(i),Physics.ParticleConnector)).get_Particle2().RemoveConnector(Cast(this._connectors.get_Item$$Int32(i),Physics.ParticleConnector));
                }
                if(this.DisposeConnectorMetaData != null)
                {
                    this.DisposeConnectorMetaData(this,new Physics.MetaDataDisposeEventArgs((Cast(this._connectors.get_Item$$Int32(i),Physics.ParticleConnector)).get_MetaData()));
                }
                this.RemoveConnector(Cast(this._connectors.get_Item$$Int32(i),Physics.ParticleConnector));
            }
        },
        AccumulateConnectorForces:function()
        {
            var v=new Physics.Vector(0,0);
            var $it3=this.get_Connectors().GetEnumerator();
            while($it3.MoveNext())
            {
                var connector=$it3.get_Current();
                if(this.IsInwardConnection(connector))
                {
                    v += connector.ForceOnParticle2();
                }
                else
                {
                    v += connector.ForceOnParticle1();
                }
            }
            return v;
        },
        RestingForceAtPosition:function(position)
        {
            var v=this._position - position;
            var forceScalar=this._restingForce * this._forceDissipationFunction(Physics.Vector.Length(v));
            if(v.get_X() != 0 || v.get_Y() != 0)
            {
                Physics.Vector.Normalize(v);
            }
            else
            {
                var r=new System.Random.ctor$$Int32(System.DateTime.get_Now().get_Millisecond());
                var value=r.NextDouble();
                v = new Physics.Vector(value,1 - value);
            }
            Physics.Vector.MultiplyLength(v,forceScalar * -1);
            return v;
        },
        SetInwardConnectorLengths:function(length)
        {
            var $it4=this.get_Connectors().GetEnumerator();
            while($it4.MoveNext())
            {
                var connector=$it4.get_Current();
                if(this.IsInwardConnection(connector))
                {
                    connector.set_RestingLength(length);
                }
            }
        },
        SetOutwardConnectorLengths:function(length)
        {
            var $it5=this.get_Connectors().GetEnumerator();
            while($it5.MoveNext())
            {
                var connector=$it5.get_Current();
                if(this.IsOutwardConnection(connector))
                {
                    connector.set_RestingLength(length);
                }
            }
        },
        IsInwardConnection:function(p)
        {
            return p.get_Particle2() == this;
        },
        IsOutwardConnection:function(p)
        {
            return p.get_Particle1() == this;
        },
        InitPosition:function(x,y)
        {
            this.set_Position(new Physics.Vector(x,y));
            this.set_PreviousPosition(this.get_Position().Clone());
        }
    }
};
JsTypes.push(Physics$Particle);
