/*@Generated by SharpKit v4.23.8000*/
if(typeof(JsTypes) == "undefined")
    JsTypes = [];
var Physics$ParticleSimulation=
{
    fullname:"Physics.ParticleSimulation",
    baseTypeName:"System.Object",
    assemblyName:"Physics",
    Kind:"Class",
    definition:
    {
        ctor:function(top,left,width,height,gravity,frictionConstant,staticFriction,connectionLength,connectionSpringConstant,forceDissipationFunction)
        {
            this._gravity = 0;
            this._frictionConstant = 0;
            this._staticFriction = 0;
            this._connectionLength = 0;
            this._connectionSpringConstant = 0;
            this._width = 0;
            this._height = 0;
            this._top = 0;
            this._left = 0;
            this._forceDissipationFunction = null;
            this._particles = null;
            System.Object.ctor.call(this);
            this._top = top;
            this._left = left;
            this._width = width;
            this._height = height;
            this._gravity = gravity;
            this._frictionConstant = frictionConstant;
            this.set_StaticFriction(staticFriction);
            this._connectionLength = connectionLength;
            this._connectionSpringConstant = connectionSpringConstant;
            this._forceDissipationFunction = forceDissipationFunction;
            this._particles = new System.Collections.ArrayList.ctor();
        },
        add_DisposeParticleMetaData:function(value){this.DisposeParticleMetaData=CombineDelegates(this.DisposeParticleMetaData, value);},
        remove_DisposeParticleMetaData:function(value){this.DisposeParticleMetaData=RemoveDelegate(this.DisposeParticleMetaData, value);},
        AddParticle:function(p,metaData)
        {
            p.set_MetaData(metaData);
            this._particles.Add(p);
        },
        AddParticleToParticle:function(p,m,p1,cm)
        {
            this.AddParticle(p,m);
            p1.AddConnection(p,cm,this._connectionLength,this._connectionSpringConstant);
        },
        RemoveParticle:function(p)
        {
            p.DisconnectParticle();
            if(this.DisposeParticleMetaData != null)
            {
                this.DisposeParticleMetaData(this,new Physics.MetaDataDisposeEventArgs(p.get_MetaData()));
            }
            this._particles.Remove(p);
        },
        RunSimulation:function(timeStep)
        {
            this.AccumulateForces();
            this.Verlet(timeStep);
            this.SatisfyConstraints();
        },
        Verlet:function(step)
        {
            var $it6=this._particles.GetEnumerator();
            while($it6.MoveNext())
            {
                var p=$it6.get_Current();
                var temp=p.get_Position().Clone();
                var acceleration=p.get_AccumulatedForces().Clone();
                if(Physics.Vector.Length(acceleration) >= this.get_StaticFriction())
                {
                    Physics.Vector.MultiplyLength(acceleration,step * step * p.get_InvMass());
                    var newPos=p.get_Position() - p.get_PreviousPosition();
                    Physics.Vector.MultiplyLength(newPos,this._frictionConstant);
                    p.set_Position(p.get_Position() + newPos + acceleration);
                    p.set_PreviousPosition(temp.Clone());
                }
                else
                {
                    p.set_PreviousPosition(p.get_Position().Clone());
                }
            }
        },
        SatisfyConstraints:function()
        {
            var $it7=this._particles.GetEnumerator();
            while($it7.MoveNext())
            {
                var p=$it7.get_Current();
                p.get_Position().set_X(System.Math.Min$$Double$$Double(System.Math.Max$$Double$$Double(this._left,p.get_Position().get_X()),this._width + this._left));
                p.get_Position().set_Y(System.Math.Min$$Double$$Double(System.Math.Max$$Double$$Double(this._top,p.get_Position().get_Y()),this._height + this._top));
            }
        },
        AccumulateForces:function()
        {
            var $it8=this._particles.GetEnumerator();
            while($it8.MoveNext())
            {
                var p=$it8.get_Current();
                p.set_AccumulatedForces(new Physics.Vector(0,this.get_Gravity()));
                p.set_AccumulatedForces(p.get_AccumulatedForces() + p.AccumulateConnectorForces());
                var $it9=this._particles.GetEnumerator();
                while($it9.MoveNext())
                {
                    var op=$it9.get_Current();
                    if(op != p)
                    {
                        p.set_AccumulatedForces(p.get_AccumulatedForces() + op.RestingForceAtPosition(p.get_Position()));
                    }
                }
            }
        },
        ForceDissipationFunction$$:"ForceDissipationDelegate",
        get_ForceDissipationFunction:function()
        {
            return this._forceDissipationFunction;
        },
        Particles$$:"System.Collections.ArrayList",
        get_Particles:function()
        {
            return this._particles;
        },
        FrictionConstant$$:"System.Double",
        get_FrictionConstant:function()
        {
            return this._frictionConstant;
        },
        set_FrictionConstant:function(value)
        {
            this._frictionConstant = value;
        },
        Gravity$$:"System.Double",
        get_Gravity:function()
        {
            return this._gravity;
        },
        set_Gravity:function(value)
        {
            this._gravity = value;
        },
        StaticFriction$$:"System.Double",
        get_StaticFriction:function()
        {
            return this._staticFriction;
        },
        set_StaticFriction:function(value)
        {
            this._staticFriction = value;
        },
        Top$$:"System.Double",
        get_Top:function()
        {
            return this._top;
        },
        set_Top:function(value)
        {
            this._top = value;
        },
        Left$$:"System.Double",
        get_Left:function()
        {
            return this._left;
        },
        set_Left:function(value)
        {
            this._left = value;
        },
        Width$$:"System.Double",
        get_Width:function()
        {
            return this._width;
        },
        set_Width:function(value)
        {
            this._width = value;
        },
        Height$$:"System.Double",
        get_Height:function()
        {
            return this._height;
        },
        set_Height:function(value)
        {
            this._height = value;
        }
    }
};
JsTypes.push(Physics$ParticleSimulation);
